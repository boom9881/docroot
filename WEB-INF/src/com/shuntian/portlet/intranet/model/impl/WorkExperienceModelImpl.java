/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.shuntian.portlet.intranet.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.shuntian.portlet.intranet.model.WorkExperience;
import com.shuntian.portlet.intranet.model.WorkExperienceModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the WorkExperience service. Represents a row in the &quot;Intranet_WorkExperience&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.shuntian.portlet.intranet.model.WorkExperienceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WorkExperienceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see WorkExperienceImpl
 * @see com.shuntian.portlet.intranet.model.WorkExperience
 * @see com.shuntian.portlet.intranet.model.WorkExperienceModel
 * @generated
 */
public class WorkExperienceModelImpl extends BaseModelImpl<WorkExperience>
	implements WorkExperienceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a work experience model instance should use the {@link com.shuntian.portlet.intranet.model.WorkExperience} interface instead.
	 */
	public static final String TABLE_NAME = "Intranet_WorkExperience";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "witness", Types.VARCHAR },
			{ "onceJob", Types.VARCHAR },
			{ "workUnit", Types.VARCHAR },
			{ "contactPhone", Types.VARCHAR },
			{ "startTime", Types.TIMESTAMP },
			{ "stopTime", Types.TIMESTAMP },
			{ "createUserId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedUserId", Types.BIGINT },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table Intranet_WorkExperience (id_ LONG not null primary key,userId LONG,witness VARCHAR(75) null,onceJob VARCHAR(75) null,workUnit VARCHAR(75) null,contactPhone VARCHAR(75) null,startTime DATE null,stopTime DATE null,createUserId LONG,createDate DATE null,modifiedUserId LONG,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table Intranet_WorkExperience";
	public static final String ORDER_BY_JPQL = " ORDER BY workExperience.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY Intranet_WorkExperience.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.shuntian.portlet.intranet.model.WorkExperience"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.shuntian.portlet.intranet.model.WorkExperience"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.shuntian.portlet.intranet.model.WorkExperience"));

	public WorkExperienceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return WorkExperience.class;
	}

	@Override
	public String getModelClassName() {
		return WorkExperience.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("userId", getUserId());
		attributes.put("witness", getWitness());
		attributes.put("onceJob", getOnceJob());
		attributes.put("workUnit", getWorkUnit());
		attributes.put("contactPhone", getContactPhone());
		attributes.put("startTime", getStartTime());
		attributes.put("stopTime", getStopTime());
		attributes.put("createUserId", getCreateUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedUserId", getModifiedUserId());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String witness = (String)attributes.get("witness");

		if (witness != null) {
			setWitness(witness);
		}

		String onceJob = (String)attributes.get("onceJob");

		if (onceJob != null) {
			setOnceJob(onceJob);
		}

		String workUnit = (String)attributes.get("workUnit");

		if (workUnit != null) {
			setWorkUnit(workUnit);
		}

		String contactPhone = (String)attributes.get("contactPhone");

		if (contactPhone != null) {
			setContactPhone(contactPhone);
		}

		Date startTime = (Date)attributes.get("startTime");

		if (startTime != null) {
			setStartTime(startTime);
		}

		Date stopTime = (Date)attributes.get("stopTime");

		if (stopTime != null) {
			setStopTime(stopTime);
		}

		Long createUserId = (Long)attributes.get("createUserId");

		if (createUserId != null) {
			setCreateUserId(createUserId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long modifiedUserId = (Long)attributes.get("modifiedUserId");

		if (modifiedUserId != null) {
			setModifiedUserId(modifiedUserId);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getWitness() {
		if (_witness == null) {
			return StringPool.BLANK;
		}
		else {
			return _witness;
		}
	}

	@Override
	public void setWitness(String witness) {
		_witness = witness;
	}

	@Override
	public String getOnceJob() {
		if (_onceJob == null) {
			return StringPool.BLANK;
		}
		else {
			return _onceJob;
		}
	}

	@Override
	public void setOnceJob(String onceJob) {
		_onceJob = onceJob;
	}

	@Override
	public String getWorkUnit() {
		if (_workUnit == null) {
			return StringPool.BLANK;
		}
		else {
			return _workUnit;
		}
	}

	@Override
	public void setWorkUnit(String workUnit) {
		_workUnit = workUnit;
	}

	@Override
	public String getContactPhone() {
		if (_contactPhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _contactPhone;
		}
	}

	@Override
	public void setContactPhone(String contactPhone) {
		_contactPhone = contactPhone;
	}

	@Override
	public Date getStartTime() {
		return _startTime;
	}

	@Override
	public void setStartTime(Date startTime) {
		_startTime = startTime;
	}

	@Override
	public Date getStopTime() {
		return _stopTime;
	}

	@Override
	public void setStopTime(Date stopTime) {
		_stopTime = stopTime;
	}

	@Override
	public long getCreateUserId() {
		return _createUserId;
	}

	@Override
	public void setCreateUserId(long createUserId) {
		_createUserId = createUserId;
	}

	@Override
	public String getCreateUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getCreateUserId(), "uuid",
			_createUserUuid);
	}

	@Override
	public void setCreateUserUuid(String createUserUuid) {
		_createUserUuid = createUserUuid;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public long getModifiedUserId() {
		return _modifiedUserId;
	}

	@Override
	public void setModifiedUserId(long modifiedUserId) {
		_modifiedUserId = modifiedUserId;
	}

	@Override
	public String getModifiedUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getModifiedUserId(), "uuid",
			_modifiedUserUuid);
	}

	@Override
	public void setModifiedUserUuid(String modifiedUserUuid) {
		_modifiedUserUuid = modifiedUserUuid;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			WorkExperience.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public WorkExperience toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (WorkExperience)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		WorkExperienceImpl workExperienceImpl = new WorkExperienceImpl();

		workExperienceImpl.setId(getId());
		workExperienceImpl.setUserId(getUserId());
		workExperienceImpl.setWitness(getWitness());
		workExperienceImpl.setOnceJob(getOnceJob());
		workExperienceImpl.setWorkUnit(getWorkUnit());
		workExperienceImpl.setContactPhone(getContactPhone());
		workExperienceImpl.setStartTime(getStartTime());
		workExperienceImpl.setStopTime(getStopTime());
		workExperienceImpl.setCreateUserId(getCreateUserId());
		workExperienceImpl.setCreateDate(getCreateDate());
		workExperienceImpl.setModifiedUserId(getModifiedUserId());
		workExperienceImpl.setModifiedDate(getModifiedDate());

		workExperienceImpl.resetOriginalValues();

		return workExperienceImpl;
	}

	@Override
	public int compareTo(WorkExperience workExperience) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(),
				workExperience.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof WorkExperience)) {
			return false;
		}

		WorkExperience workExperience = (WorkExperience)obj;

		long primaryKey = workExperience.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<WorkExperience> toCacheModel() {
		WorkExperienceCacheModel workExperienceCacheModel = new WorkExperienceCacheModel();

		workExperienceCacheModel.id = getId();

		workExperienceCacheModel.userId = getUserId();

		workExperienceCacheModel.witness = getWitness();

		String witness = workExperienceCacheModel.witness;

		if ((witness != null) && (witness.length() == 0)) {
			workExperienceCacheModel.witness = null;
		}

		workExperienceCacheModel.onceJob = getOnceJob();

		String onceJob = workExperienceCacheModel.onceJob;

		if ((onceJob != null) && (onceJob.length() == 0)) {
			workExperienceCacheModel.onceJob = null;
		}

		workExperienceCacheModel.workUnit = getWorkUnit();

		String workUnit = workExperienceCacheModel.workUnit;

		if ((workUnit != null) && (workUnit.length() == 0)) {
			workExperienceCacheModel.workUnit = null;
		}

		workExperienceCacheModel.contactPhone = getContactPhone();

		String contactPhone = workExperienceCacheModel.contactPhone;

		if ((contactPhone != null) && (contactPhone.length() == 0)) {
			workExperienceCacheModel.contactPhone = null;
		}

		Date startTime = getStartTime();

		if (startTime != null) {
			workExperienceCacheModel.startTime = startTime.getTime();
		}
		else {
			workExperienceCacheModel.startTime = Long.MIN_VALUE;
		}

		Date stopTime = getStopTime();

		if (stopTime != null) {
			workExperienceCacheModel.stopTime = stopTime.getTime();
		}
		else {
			workExperienceCacheModel.stopTime = Long.MIN_VALUE;
		}

		workExperienceCacheModel.createUserId = getCreateUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			workExperienceCacheModel.createDate = createDate.getTime();
		}
		else {
			workExperienceCacheModel.createDate = Long.MIN_VALUE;
		}

		workExperienceCacheModel.modifiedUserId = getModifiedUserId();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			workExperienceCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			workExperienceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return workExperienceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", witness=");
		sb.append(getWitness());
		sb.append(", onceJob=");
		sb.append(getOnceJob());
		sb.append(", workUnit=");
		sb.append(getWorkUnit());
		sb.append(", contactPhone=");
		sb.append(getContactPhone());
		sb.append(", startTime=");
		sb.append(getStartTime());
		sb.append(", stopTime=");
		sb.append(getStopTime());
		sb.append(", createUserId=");
		sb.append(getCreateUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedUserId=");
		sb.append(getModifiedUserId());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.shuntian.portlet.intranet.model.WorkExperience");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>witness</column-name><column-value><![CDATA[");
		sb.append(getWitness());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>onceJob</column-name><column-value><![CDATA[");
		sb.append(getOnceJob());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workUnit</column-name><column-value><![CDATA[");
		sb.append(getWorkUnit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactPhone</column-name><column-value><![CDATA[");
		sb.append(getContactPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startTime</column-name><column-value><![CDATA[");
		sb.append(getStartTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stopTime</column-name><column-value><![CDATA[");
		sb.append(getStopTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createUserId</column-name><column-value><![CDATA[");
		sb.append(getCreateUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedUserId</column-name><column-value><![CDATA[");
		sb.append(getModifiedUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = WorkExperience.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			WorkExperience.class
		};
	private long _id;
	private long _userId;
	private String _userUuid;
	private String _witness;
	private String _onceJob;
	private String _workUnit;
	private String _contactPhone;
	private Date _startTime;
	private Date _stopTime;
	private long _createUserId;
	private String _createUserUuid;
	private Date _createDate;
	private long _modifiedUserId;
	private String _modifiedUserUuid;
	private Date _modifiedDate;
	private WorkExperience _escapedModel;
}