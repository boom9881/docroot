/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.shuntian.portlet.intranet.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.shuntian.portlet.intranet.model.WorkExperience;
import com.shuntian.portlet.intranet.model.WorkExperienceModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the WorkExperience service. Represents a row in the &quot;Intranet_WorkExperience&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.shuntian.portlet.intranet.model.WorkExperienceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WorkExperienceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see WorkExperienceImpl
 * @see com.shuntian.portlet.intranet.model.WorkExperience
 * @see com.shuntian.portlet.intranet.model.WorkExperienceModel
 * @generated
 */
public class WorkExperienceModelImpl extends BaseModelImpl<WorkExperience>
	implements WorkExperienceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a work experience model instance should use the {@link com.shuntian.portlet.intranet.model.WorkExperience} interface instead.
	 */
	public static final String TABLE_NAME = "Intranet_WorkExperience";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "weWitness", Types.VARCHAR },
			{ "weOnceJob", Types.VARCHAR },
			{ "weWorkUnit", Types.VARCHAR },
			{ "weContactPhone", Types.VARCHAR },
			{ "weStartTimeYear", Types.VARCHAR },
			{ "weStartTimeMonth", Types.VARCHAR },
			{ "weStopTimeYear", Types.VARCHAR },
			{ "weStopTimeMonth", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Intranet_WorkExperience (id_ LONG not null primary key,userId LONG,weWitness VARCHAR(75) null,weOnceJob VARCHAR(75) null,weWorkUnit VARCHAR(75) null,weContactPhone VARCHAR(75) null,weStartTimeYear VARCHAR(75) null,weStartTimeMonth VARCHAR(75) null,weStopTimeYear VARCHAR(75) null,weStopTimeMonth VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Intranet_WorkExperience";
	public static final String ORDER_BY_JPQL = " ORDER BY workExperience.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Intranet_WorkExperience.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.shuntian.portlet.intranet.model.WorkExperience"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.shuntian.portlet.intranet.model.WorkExperience"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.shuntian.portlet.intranet.model.WorkExperience"),
			true);
	public static long USERID_COLUMN_BITMASK = 1L;
	public static long ID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.shuntian.portlet.intranet.model.WorkExperience"));

	public WorkExperienceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return WorkExperience.class;
	}

	@Override
	public String getModelClassName() {
		return WorkExperience.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("userId", getUserId());
		attributes.put("weWitness", getWeWitness());
		attributes.put("weOnceJob", getWeOnceJob());
		attributes.put("weWorkUnit", getWeWorkUnit());
		attributes.put("weContactPhone", getWeContactPhone());
		attributes.put("weStartTimeYear", getWeStartTimeYear());
		attributes.put("weStartTimeMonth", getWeStartTimeMonth());
		attributes.put("weStopTimeYear", getWeStopTimeYear());
		attributes.put("weStopTimeMonth", getWeStopTimeMonth());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String weWitness = (String)attributes.get("weWitness");

		if (weWitness != null) {
			setWeWitness(weWitness);
		}

		String weOnceJob = (String)attributes.get("weOnceJob");

		if (weOnceJob != null) {
			setWeOnceJob(weOnceJob);
		}

		String weWorkUnit = (String)attributes.get("weWorkUnit");

		if (weWorkUnit != null) {
			setWeWorkUnit(weWorkUnit);
		}

		String weContactPhone = (String)attributes.get("weContactPhone");

		if (weContactPhone != null) {
			setWeContactPhone(weContactPhone);
		}

		String weStartTimeYear = (String)attributes.get("weStartTimeYear");

		if (weStartTimeYear != null) {
			setWeStartTimeYear(weStartTimeYear);
		}

		String weStartTimeMonth = (String)attributes.get("weStartTimeMonth");

		if (weStartTimeMonth != null) {
			setWeStartTimeMonth(weStartTimeMonth);
		}

		String weStopTimeYear = (String)attributes.get("weStopTimeYear");

		if (weStopTimeYear != null) {
			setWeStopTimeYear(weStopTimeYear);
		}

		String weStopTimeMonth = (String)attributes.get("weStopTimeMonth");

		if (weStopTimeMonth != null) {
			setWeStopTimeMonth(weStopTimeMonth);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getWeWitness() {
		if (_weWitness == null) {
			return StringPool.BLANK;
		}
		else {
			return _weWitness;
		}
	}

	@Override
	public void setWeWitness(String weWitness) {
		_weWitness = weWitness;
	}

	@Override
	public String getWeOnceJob() {
		if (_weOnceJob == null) {
			return StringPool.BLANK;
		}
		else {
			return _weOnceJob;
		}
	}

	@Override
	public void setWeOnceJob(String weOnceJob) {
		_weOnceJob = weOnceJob;
	}

	@Override
	public String getWeWorkUnit() {
		if (_weWorkUnit == null) {
			return StringPool.BLANK;
		}
		else {
			return _weWorkUnit;
		}
	}

	@Override
	public void setWeWorkUnit(String weWorkUnit) {
		_weWorkUnit = weWorkUnit;
	}

	@Override
	public String getWeContactPhone() {
		if (_weContactPhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _weContactPhone;
		}
	}

	@Override
	public void setWeContactPhone(String weContactPhone) {
		_weContactPhone = weContactPhone;
	}

	@Override
	public String getWeStartTimeYear() {
		if (_weStartTimeYear == null) {
			return StringPool.BLANK;
		}
		else {
			return _weStartTimeYear;
		}
	}

	@Override
	public void setWeStartTimeYear(String weStartTimeYear) {
		_weStartTimeYear = weStartTimeYear;
	}

	@Override
	public String getWeStartTimeMonth() {
		if (_weStartTimeMonth == null) {
			return StringPool.BLANK;
		}
		else {
			return _weStartTimeMonth;
		}
	}

	@Override
	public void setWeStartTimeMonth(String weStartTimeMonth) {
		_weStartTimeMonth = weStartTimeMonth;
	}

	@Override
	public String getWeStopTimeYear() {
		if (_weStopTimeYear == null) {
			return StringPool.BLANK;
		}
		else {
			return _weStopTimeYear;
		}
	}

	@Override
	public void setWeStopTimeYear(String weStopTimeYear) {
		_weStopTimeYear = weStopTimeYear;
	}

	@Override
	public String getWeStopTimeMonth() {
		if (_weStopTimeMonth == null) {
			return StringPool.BLANK;
		}
		else {
			return _weStopTimeMonth;
		}
	}

	@Override
	public void setWeStopTimeMonth(String weStopTimeMonth) {
		_weStopTimeMonth = weStopTimeMonth;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			WorkExperience.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public WorkExperience toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (WorkExperience)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		WorkExperienceImpl workExperienceImpl = new WorkExperienceImpl();

		workExperienceImpl.setId(getId());
		workExperienceImpl.setUserId(getUserId());
		workExperienceImpl.setWeWitness(getWeWitness());
		workExperienceImpl.setWeOnceJob(getWeOnceJob());
		workExperienceImpl.setWeWorkUnit(getWeWorkUnit());
		workExperienceImpl.setWeContactPhone(getWeContactPhone());
		workExperienceImpl.setWeStartTimeYear(getWeStartTimeYear());
		workExperienceImpl.setWeStartTimeMonth(getWeStartTimeMonth());
		workExperienceImpl.setWeStopTimeYear(getWeStopTimeYear());
		workExperienceImpl.setWeStopTimeMonth(getWeStopTimeMonth());

		workExperienceImpl.resetOriginalValues();

		return workExperienceImpl;
	}

	@Override
	public int compareTo(WorkExperience workExperience) {
		int value = 0;

		if (getId() < workExperience.getId()) {
			value = -1;
		}
		else if (getId() > workExperience.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof WorkExperience)) {
			return false;
		}

		WorkExperience workExperience = (WorkExperience)obj;

		long primaryKey = workExperience.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		WorkExperienceModelImpl workExperienceModelImpl = this;

		workExperienceModelImpl._originalUserId = workExperienceModelImpl._userId;

		workExperienceModelImpl._setOriginalUserId = false;

		workExperienceModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<WorkExperience> toCacheModel() {
		WorkExperienceCacheModel workExperienceCacheModel = new WorkExperienceCacheModel();

		workExperienceCacheModel.id = getId();

		workExperienceCacheModel.userId = getUserId();

		workExperienceCacheModel.weWitness = getWeWitness();

		String weWitness = workExperienceCacheModel.weWitness;

		if ((weWitness != null) && (weWitness.length() == 0)) {
			workExperienceCacheModel.weWitness = null;
		}

		workExperienceCacheModel.weOnceJob = getWeOnceJob();

		String weOnceJob = workExperienceCacheModel.weOnceJob;

		if ((weOnceJob != null) && (weOnceJob.length() == 0)) {
			workExperienceCacheModel.weOnceJob = null;
		}

		workExperienceCacheModel.weWorkUnit = getWeWorkUnit();

		String weWorkUnit = workExperienceCacheModel.weWorkUnit;

		if ((weWorkUnit != null) && (weWorkUnit.length() == 0)) {
			workExperienceCacheModel.weWorkUnit = null;
		}

		workExperienceCacheModel.weContactPhone = getWeContactPhone();

		String weContactPhone = workExperienceCacheModel.weContactPhone;

		if ((weContactPhone != null) && (weContactPhone.length() == 0)) {
			workExperienceCacheModel.weContactPhone = null;
		}

		workExperienceCacheModel.weStartTimeYear = getWeStartTimeYear();

		String weStartTimeYear = workExperienceCacheModel.weStartTimeYear;

		if ((weStartTimeYear != null) && (weStartTimeYear.length() == 0)) {
			workExperienceCacheModel.weStartTimeYear = null;
		}

		workExperienceCacheModel.weStartTimeMonth = getWeStartTimeMonth();

		String weStartTimeMonth = workExperienceCacheModel.weStartTimeMonth;

		if ((weStartTimeMonth != null) && (weStartTimeMonth.length() == 0)) {
			workExperienceCacheModel.weStartTimeMonth = null;
		}

		workExperienceCacheModel.weStopTimeYear = getWeStopTimeYear();

		String weStopTimeYear = workExperienceCacheModel.weStopTimeYear;

		if ((weStopTimeYear != null) && (weStopTimeYear.length() == 0)) {
			workExperienceCacheModel.weStopTimeYear = null;
		}

		workExperienceCacheModel.weStopTimeMonth = getWeStopTimeMonth();

		String weStopTimeMonth = workExperienceCacheModel.weStopTimeMonth;

		if ((weStopTimeMonth != null) && (weStopTimeMonth.length() == 0)) {
			workExperienceCacheModel.weStopTimeMonth = null;
		}

		return workExperienceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", weWitness=");
		sb.append(getWeWitness());
		sb.append(", weOnceJob=");
		sb.append(getWeOnceJob());
		sb.append(", weWorkUnit=");
		sb.append(getWeWorkUnit());
		sb.append(", weContactPhone=");
		sb.append(getWeContactPhone());
		sb.append(", weStartTimeYear=");
		sb.append(getWeStartTimeYear());
		sb.append(", weStartTimeMonth=");
		sb.append(getWeStartTimeMonth());
		sb.append(", weStopTimeYear=");
		sb.append(getWeStopTimeYear());
		sb.append(", weStopTimeMonth=");
		sb.append(getWeStopTimeMonth());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.shuntian.portlet.intranet.model.WorkExperience");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>weWitness</column-name><column-value><![CDATA[");
		sb.append(getWeWitness());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>weOnceJob</column-name><column-value><![CDATA[");
		sb.append(getWeOnceJob());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>weWorkUnit</column-name><column-value><![CDATA[");
		sb.append(getWeWorkUnit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>weContactPhone</column-name><column-value><![CDATA[");
		sb.append(getWeContactPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>weStartTimeYear</column-name><column-value><![CDATA[");
		sb.append(getWeStartTimeYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>weStartTimeMonth</column-name><column-value><![CDATA[");
		sb.append(getWeStartTimeMonth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>weStopTimeYear</column-name><column-value><![CDATA[");
		sb.append(getWeStopTimeYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>weStopTimeMonth</column-name><column-value><![CDATA[");
		sb.append(getWeStopTimeMonth());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = WorkExperience.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			WorkExperience.class
		};
	private long _id;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _weWitness;
	private String _weOnceJob;
	private String _weWorkUnit;
	private String _weContactPhone;
	private String _weStartTimeYear;
	private String _weStartTimeMonth;
	private String _weStopTimeYear;
	private String _weStopTimeMonth;
	private long _columnBitmask;
	private WorkExperience _escapedModel;
}