/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.shuntian.portlet.intranet.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.shuntian.portlet.intranet.model.FamilyRelationship;
import com.shuntian.portlet.intranet.model.FamilyRelationshipModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the FamilyRelationship service. Represents a row in the &quot;Intranet_FamilyRelationship&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.shuntian.portlet.intranet.model.FamilyRelationshipModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FamilyRelationshipImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FamilyRelationshipImpl
 * @see com.shuntian.portlet.intranet.model.FamilyRelationship
 * @see com.shuntian.portlet.intranet.model.FamilyRelationshipModel
 * @generated
 */
public class FamilyRelationshipModelImpl extends BaseModelImpl<FamilyRelationship>
	implements FamilyRelationshipModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a family relationship model instance should use the {@link com.shuntian.portlet.intranet.model.FamilyRelationship} interface instead.
	 */
	public static final String TABLE_NAME = "Intranet_FamilyRelationship";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "frName", Types.VARCHAR },
			{ "frRelationship", Types.VARCHAR },
			{ "frWorkUnit", Types.VARCHAR },
			{ "frContactPhone", Types.VARCHAR },
			{ "frOnceJob", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Intranet_FamilyRelationship (id_ LONG not null primary key,userId LONG,frName VARCHAR(75) null,frRelationship VARCHAR(75) null,frWorkUnit VARCHAR(75) null,frContactPhone VARCHAR(75) null,frOnceJob VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Intranet_FamilyRelationship";
	public static final String ORDER_BY_JPQL = " ORDER BY familyRelationship.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Intranet_FamilyRelationship.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.shuntian.portlet.intranet.model.FamilyRelationship"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.shuntian.portlet.intranet.model.FamilyRelationship"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.shuntian.portlet.intranet.model.FamilyRelationship"),
			true);
	public static long USERID_COLUMN_BITMASK = 1L;
	public static long ID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.shuntian.portlet.intranet.model.FamilyRelationship"));

	public FamilyRelationshipModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FamilyRelationship.class;
	}

	@Override
	public String getModelClassName() {
		return FamilyRelationship.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("userId", getUserId());
		attributes.put("frName", getFrName());
		attributes.put("frRelationship", getFrRelationship());
		attributes.put("frWorkUnit", getFrWorkUnit());
		attributes.put("frContactPhone", getFrContactPhone());
		attributes.put("frOnceJob", getFrOnceJob());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String frName = (String)attributes.get("frName");

		if (frName != null) {
			setFrName(frName);
		}

		String frRelationship = (String)attributes.get("frRelationship");

		if (frRelationship != null) {
			setFrRelationship(frRelationship);
		}

		String frWorkUnit = (String)attributes.get("frWorkUnit");

		if (frWorkUnit != null) {
			setFrWorkUnit(frWorkUnit);
		}

		String frContactPhone = (String)attributes.get("frContactPhone");

		if (frContactPhone != null) {
			setFrContactPhone(frContactPhone);
		}

		String frOnceJob = (String)attributes.get("frOnceJob");

		if (frOnceJob != null) {
			setFrOnceJob(frOnceJob);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getFrName() {
		if (_frName == null) {
			return StringPool.BLANK;
		}
		else {
			return _frName;
		}
	}

	@Override
	public void setFrName(String frName) {
		_frName = frName;
	}

	@Override
	public String getFrRelationship() {
		if (_frRelationship == null) {
			return StringPool.BLANK;
		}
		else {
			return _frRelationship;
		}
	}

	@Override
	public void setFrRelationship(String frRelationship) {
		_frRelationship = frRelationship;
	}

	@Override
	public String getFrWorkUnit() {
		if (_frWorkUnit == null) {
			return StringPool.BLANK;
		}
		else {
			return _frWorkUnit;
		}
	}

	@Override
	public void setFrWorkUnit(String frWorkUnit) {
		_frWorkUnit = frWorkUnit;
	}

	@Override
	public String getFrContactPhone() {
		if (_frContactPhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _frContactPhone;
		}
	}

	@Override
	public void setFrContactPhone(String frContactPhone) {
		_frContactPhone = frContactPhone;
	}

	@Override
	public String getFrOnceJob() {
		if (_frOnceJob == null) {
			return StringPool.BLANK;
		}
		else {
			return _frOnceJob;
		}
	}

	@Override
	public void setFrOnceJob(String frOnceJob) {
		_frOnceJob = frOnceJob;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			FamilyRelationship.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FamilyRelationship toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (FamilyRelationship)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FamilyRelationshipImpl familyRelationshipImpl = new FamilyRelationshipImpl();

		familyRelationshipImpl.setId(getId());
		familyRelationshipImpl.setUserId(getUserId());
		familyRelationshipImpl.setFrName(getFrName());
		familyRelationshipImpl.setFrRelationship(getFrRelationship());
		familyRelationshipImpl.setFrWorkUnit(getFrWorkUnit());
		familyRelationshipImpl.setFrContactPhone(getFrContactPhone());
		familyRelationshipImpl.setFrOnceJob(getFrOnceJob());

		familyRelationshipImpl.resetOriginalValues();

		return familyRelationshipImpl;
	}

	@Override
	public int compareTo(FamilyRelationship familyRelationship) {
		int value = 0;

		if (getId() < familyRelationship.getId()) {
			value = -1;
		}
		else if (getId() > familyRelationship.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof FamilyRelationship)) {
			return false;
		}

		FamilyRelationship familyRelationship = (FamilyRelationship)obj;

		long primaryKey = familyRelationship.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		FamilyRelationshipModelImpl familyRelationshipModelImpl = this;

		familyRelationshipModelImpl._originalUserId = familyRelationshipModelImpl._userId;

		familyRelationshipModelImpl._setOriginalUserId = false;

		familyRelationshipModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<FamilyRelationship> toCacheModel() {
		FamilyRelationshipCacheModel familyRelationshipCacheModel = new FamilyRelationshipCacheModel();

		familyRelationshipCacheModel.id = getId();

		familyRelationshipCacheModel.userId = getUserId();

		familyRelationshipCacheModel.frName = getFrName();

		String frName = familyRelationshipCacheModel.frName;

		if ((frName != null) && (frName.length() == 0)) {
			familyRelationshipCacheModel.frName = null;
		}

		familyRelationshipCacheModel.frRelationship = getFrRelationship();

		String frRelationship = familyRelationshipCacheModel.frRelationship;

		if ((frRelationship != null) && (frRelationship.length() == 0)) {
			familyRelationshipCacheModel.frRelationship = null;
		}

		familyRelationshipCacheModel.frWorkUnit = getFrWorkUnit();

		String frWorkUnit = familyRelationshipCacheModel.frWorkUnit;

		if ((frWorkUnit != null) && (frWorkUnit.length() == 0)) {
			familyRelationshipCacheModel.frWorkUnit = null;
		}

		familyRelationshipCacheModel.frContactPhone = getFrContactPhone();

		String frContactPhone = familyRelationshipCacheModel.frContactPhone;

		if ((frContactPhone != null) && (frContactPhone.length() == 0)) {
			familyRelationshipCacheModel.frContactPhone = null;
		}

		familyRelationshipCacheModel.frOnceJob = getFrOnceJob();

		String frOnceJob = familyRelationshipCacheModel.frOnceJob;

		if ((frOnceJob != null) && (frOnceJob.length() == 0)) {
			familyRelationshipCacheModel.frOnceJob = null;
		}

		return familyRelationshipCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", frName=");
		sb.append(getFrName());
		sb.append(", frRelationship=");
		sb.append(getFrRelationship());
		sb.append(", frWorkUnit=");
		sb.append(getFrWorkUnit());
		sb.append(", frContactPhone=");
		sb.append(getFrContactPhone());
		sb.append(", frOnceJob=");
		sb.append(getFrOnceJob());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.shuntian.portlet.intranet.model.FamilyRelationship");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>frName</column-name><column-value><![CDATA[");
		sb.append(getFrName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>frRelationship</column-name><column-value><![CDATA[");
		sb.append(getFrRelationship());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>frWorkUnit</column-name><column-value><![CDATA[");
		sb.append(getFrWorkUnit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>frContactPhone</column-name><column-value><![CDATA[");
		sb.append(getFrContactPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>frOnceJob</column-name><column-value><![CDATA[");
		sb.append(getFrOnceJob());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = FamilyRelationship.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			FamilyRelationship.class
		};
	private long _id;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _frName;
	private String _frRelationship;
	private String _frWorkUnit;
	private String _frContactPhone;
	private String _frOnceJob;
	private long _columnBitmask;
	private FamilyRelationship _escapedModel;
}