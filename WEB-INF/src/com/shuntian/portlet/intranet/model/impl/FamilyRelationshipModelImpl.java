/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.shuntian.portlet.intranet.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.shuntian.portlet.intranet.model.FamilyRelationship;
import com.shuntian.portlet.intranet.model.FamilyRelationshipModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the FamilyRelationship service. Represents a row in the &quot;Intranet_FamilyRelationship&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.shuntian.portlet.intranet.model.FamilyRelationshipModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FamilyRelationshipImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FamilyRelationshipImpl
 * @see com.shuntian.portlet.intranet.model.FamilyRelationship
 * @see com.shuntian.portlet.intranet.model.FamilyRelationshipModel
 * @generated
 */
public class FamilyRelationshipModelImpl extends BaseModelImpl<FamilyRelationship>
	implements FamilyRelationshipModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a family relationship model instance should use the {@link com.shuntian.portlet.intranet.model.FamilyRelationship} interface instead.
	 */
	public static final String TABLE_NAME = "Intranet_FamilyRelationship";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "relationship", Types.VARCHAR },
			{ "workUnit", Types.VARCHAR },
			{ "contactPhone", Types.VARCHAR },
			{ "onceJob", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Intranet_FamilyRelationship (id_ LONG not null primary key,userId LONG,name VARCHAR(75) null,relationship VARCHAR(75) null,workUnit VARCHAR(75) null,contactPhone VARCHAR(75) null,onceJob VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Intranet_FamilyRelationship";
	public static final String ORDER_BY_JPQL = " ORDER BY familyRelationship.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Intranet_FamilyRelationship.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.shuntian.portlet.intranet.model.FamilyRelationship"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.shuntian.portlet.intranet.model.FamilyRelationship"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.shuntian.portlet.intranet.model.FamilyRelationship"),
			true);
	public static long USERID_COLUMN_BITMASK = 1L;
	public static long ID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.shuntian.portlet.intranet.model.FamilyRelationship"));

	public FamilyRelationshipModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FamilyRelationship.class;
	}

	@Override
	public String getModelClassName() {
		return FamilyRelationship.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("userId", getUserId());
		attributes.put("name", getName());
		attributes.put("relationship", getRelationship());
		attributes.put("workUnit", getWorkUnit());
		attributes.put("contactPhone", getContactPhone());
		attributes.put("onceJob", getOnceJob());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String relationship = (String)attributes.get("relationship");

		if (relationship != null) {
			setRelationship(relationship);
		}

		String workUnit = (String)attributes.get("workUnit");

		if (workUnit != null) {
			setWorkUnit(workUnit);
		}

		String contactPhone = (String)attributes.get("contactPhone");

		if (contactPhone != null) {
			setContactPhone(contactPhone);
		}

		String onceJob = (String)attributes.get("onceJob");

		if (onceJob != null) {
			setOnceJob(onceJob);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getRelationship() {
		if (_relationship == null) {
			return StringPool.BLANK;
		}
		else {
			return _relationship;
		}
	}

	@Override
	public void setRelationship(String relationship) {
		_relationship = relationship;
	}

	@Override
	public String getWorkUnit() {
		if (_workUnit == null) {
			return StringPool.BLANK;
		}
		else {
			return _workUnit;
		}
	}

	@Override
	public void setWorkUnit(String workUnit) {
		_workUnit = workUnit;
	}

	@Override
	public String getContactPhone() {
		if (_contactPhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _contactPhone;
		}
	}

	@Override
	public void setContactPhone(String contactPhone) {
		_contactPhone = contactPhone;
	}

	@Override
	public String getOnceJob() {
		if (_onceJob == null) {
			return StringPool.BLANK;
		}
		else {
			return _onceJob;
		}
	}

	@Override
	public void setOnceJob(String onceJob) {
		_onceJob = onceJob;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			FamilyRelationship.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FamilyRelationship toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (FamilyRelationship)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FamilyRelationshipImpl familyRelationshipImpl = new FamilyRelationshipImpl();

		familyRelationshipImpl.setId(getId());
		familyRelationshipImpl.setUserId(getUserId());
		familyRelationshipImpl.setName(getName());
		familyRelationshipImpl.setRelationship(getRelationship());
		familyRelationshipImpl.setWorkUnit(getWorkUnit());
		familyRelationshipImpl.setContactPhone(getContactPhone());
		familyRelationshipImpl.setOnceJob(getOnceJob());

		familyRelationshipImpl.resetOriginalValues();

		return familyRelationshipImpl;
	}

	@Override
	public int compareTo(FamilyRelationship familyRelationship) {
		int value = 0;

		if (getId() < familyRelationship.getId()) {
			value = -1;
		}
		else if (getId() > familyRelationship.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof FamilyRelationship)) {
			return false;
		}

		FamilyRelationship familyRelationship = (FamilyRelationship)obj;

		long primaryKey = familyRelationship.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		FamilyRelationshipModelImpl familyRelationshipModelImpl = this;

		familyRelationshipModelImpl._originalUserId = familyRelationshipModelImpl._userId;

		familyRelationshipModelImpl._setOriginalUserId = false;

		familyRelationshipModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<FamilyRelationship> toCacheModel() {
		FamilyRelationshipCacheModel familyRelationshipCacheModel = new FamilyRelationshipCacheModel();

		familyRelationshipCacheModel.id = getId();

		familyRelationshipCacheModel.userId = getUserId();

		familyRelationshipCacheModel.name = getName();

		String name = familyRelationshipCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			familyRelationshipCacheModel.name = null;
		}

		familyRelationshipCacheModel.relationship = getRelationship();

		String relationship = familyRelationshipCacheModel.relationship;

		if ((relationship != null) && (relationship.length() == 0)) {
			familyRelationshipCacheModel.relationship = null;
		}

		familyRelationshipCacheModel.workUnit = getWorkUnit();

		String workUnit = familyRelationshipCacheModel.workUnit;

		if ((workUnit != null) && (workUnit.length() == 0)) {
			familyRelationshipCacheModel.workUnit = null;
		}

		familyRelationshipCacheModel.contactPhone = getContactPhone();

		String contactPhone = familyRelationshipCacheModel.contactPhone;

		if ((contactPhone != null) && (contactPhone.length() == 0)) {
			familyRelationshipCacheModel.contactPhone = null;
		}

		familyRelationshipCacheModel.onceJob = getOnceJob();

		String onceJob = familyRelationshipCacheModel.onceJob;

		if ((onceJob != null) && (onceJob.length() == 0)) {
			familyRelationshipCacheModel.onceJob = null;
		}

		return familyRelationshipCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", relationship=");
		sb.append(getRelationship());
		sb.append(", workUnit=");
		sb.append(getWorkUnit());
		sb.append(", contactPhone=");
		sb.append(getContactPhone());
		sb.append(", onceJob=");
		sb.append(getOnceJob());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.shuntian.portlet.intranet.model.FamilyRelationship");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>relationship</column-name><column-value><![CDATA[");
		sb.append(getRelationship());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workUnit</column-name><column-value><![CDATA[");
		sb.append(getWorkUnit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactPhone</column-name><column-value><![CDATA[");
		sb.append(getContactPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>onceJob</column-name><column-value><![CDATA[");
		sb.append(getOnceJob());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = FamilyRelationship.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			FamilyRelationship.class
		};
	private long _id;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _name;
	private String _relationship;
	private String _workUnit;
	private String _contactPhone;
	private String _onceJob;
	private long _columnBitmask;
	private FamilyRelationship _escapedModel;
}